/**
 * a source generating two records per festival: 
 * one for the start of the festival, and one for the end.
 */
import dayjs from 'dayjs'
// siteInfo gets generated by hugo 
// see buildFestivalDates.html
import siteInfo from 'extras/siteInfo.json'

export default {
  name: "festivalSource",
  async getRange(start, end) {
    const festivalDates = siteInfo.pedal;
    const records = Object.keys(festivalDates).flatMap((key) => {
      const fest = festivalDates[key];
      return [ 
        // the first object has to be blank 
        // to get a unique object for start and end.
        Object.assign({}, fest, {
          uid:  key + "-festival-start",
          start: true,
          moment: dayjs(fest.startdate).startOf('day'),
          nudge: Number.MIN_VALUE,
          // type -> exists in fest, as calfestival
          // title -> ex. Pedalpalooza 2002
        }),
        Object.assign({}, fest, {
          uid:  key + "-festival-end",
          end: true,
          moment: dayjs(fest.enddate).endOf('day'),  
          nudge: Number.MAX_VALUE,
        }, fest),
      ];
    });
    const filteredRecords = records.filter(rec => {
      return !rec.moment.isBefore(start) && !rec.moment.isAfter(end);
    });
    return filteredRecords;
  }
}
